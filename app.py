from flask import Flask, render_template, request
from markupsafe import Markup
import openai
import markdown
import markdown.extensions.fenced_code
import markdown.extensions.codehilite

openai.api_key = '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'
app = Flask(__name__)
# messages = []
@app.route('/')
def home():

    return render_template('index.html')

@app.route('/get_response', methods=['POST'])

def get_bot_response():
    user_input = request.form['user_input']
    # print(user_input)
    # messages.append({'role': 'user', 'content': user_input})
    # print(messages[1])
    completion = openai.Completion.create(
        model = "text-davinci-003",
        prompt = f"act as spam detector named SPY. SPY finds all messages about asking money as spam. SPY returns likelihood of message being spam in percentage. You as SPY have to take final decision by SPY. SPY  prevents job advertisement fraud. All data entered in SPY is coming from emails, so consier them in context of email from different people. SPY analyzes the email sender if it is likly to be created by a human. give percentage and bullet points in the square brackets in the end add if text was generated by chatgpt as True or False next to percentage in brackets If text is meant to deal any fraud activity add Do not trust it in the brackets \"Unknown\".\n\nQ: {user_input}\nA:",
        temperature = 1,
        max_tokens = 10,
        top_p = 1,
        frequency_penalty = 0.0,
        presence_penalty = 0.5,
        stop = ["\n"]
    )
    ai_response = completion.choices[0].text
    # print(ai_response)
    messages.append({'role': 'assistant', 'content': ai_response})
    print(messages)
    return  Markup(markdown.markdown(ai_response, extensions=['fenced_code', 'codehilite']))
@app.route('/reset')
def reset():
    global messages
    messages = []
    return "Conversation history has been reset."
if __name__ == '__main__':
    app.run(port=5006)
